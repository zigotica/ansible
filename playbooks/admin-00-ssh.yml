---

- name: Setup SSH
  hosts: all
  gather_facts: no
  vars_files:
    - vars/vault.yml
  remote_user: root
  tasks:

    - name: Create sudo/admin groups
      group:
        name: "{{ item }}"
        state: present
      loop:
        - admin
        - sudo

    - name: Create User {{ z_user }}
      user:
        name: "{{ z_user }}"
        state: present
        password: "{{ 'changeme' | password_hash('sha512','A512') }}"
        shell: /bin/bash

    - name: Copy SSH config and complete key to server
      copy: 
        src: "{{ item }}" 
        dest: "{{ z_ssh_to_dir }}/"
        mode: 0600
        owner: "{{ z_user }}"
      loop:
        - "{{ z_ssh_from_dir }}/config"
        - "{{ z_ssh_from_dir }}/{{ z_ssh_key }}.pub"
        - "{{ z_ssh_from_dir }}/{{ z_ssh_key }}"
      register: sshcopied

    - name: Set authorized key to allow {{ z_user }} login via ssh
      ansible.posix.authorized_key:
        user: "{{ z_user }}"
        state: present
        key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/' + lookup('vars', 'z_ssh_key') + '.pub') }}"

    - name: Restrict sshd configuration
      become: true
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        mode: 0640
        validate: /usr/sbin/sshd -T -f %s
      with_items:
        - regexp: '^PermitRootLogin'
          line: 'PermitRootLogin prohibit-password'
        - regexp: '^PasswordAuthentication'
          line: 'PasswordAuthentication no'
        - regexp: '^PermitEmptyPasswords'
          line: 'PermitEmptyPasswords no'
      register: sshd

    - name: Change sudoers to allow passwordless sudo for {{ z_user }}
      become: true
      copy:
        dest: "/etc/sudoers.d/passwordless_sudo_{{ z_user }}"
        content: "{{ z_user }} ALL=(ALL) NOPASSWD: ALL"
        mode: 0440
        validate: /usr/sbin/visudo -c -f %s

    - name: Restart SSH service if needed
      become: true
      ansible.builtin.service:
        name: ssh
        state: restarted
        enabled: true
      when: sshd.changed or sshcopied.changed

